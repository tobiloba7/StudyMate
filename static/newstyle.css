:root {
  --primary: #ea40a4;
  --light: #eee;
  --dark: #313154;
  --danger: #ff5b57;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: var(--light);
  color: var(--dark);
  font-family: "Montserrat", sans-serif;
}

.container {
  margin: 2rem auto;
  padding: 2rem;
  max-width: 500px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.headers {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

label {
  display: block;
  margin-bottom: 0.5rem;
}

input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: var(--primary);
  color: #fff;
  border: none;
  border-radius: 4px;
  padding: 0.5rem 1rem;
  cursor: pointer;
}

button:hover {
  opacity: 0.8;
}

p {
  margin-top: 1rem;
  font-size: 0.9rem;
}

a {
  color: var(--primary);
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}
/* 

from flask import Flask, render_template, request, url_for, redirect, flash
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from sqlalchemy.exc import IntegrityError 
from werkzeug.security import generate_password_hash, check_password_hash
import requests
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///study_items.db'
app.config['SECRET_KEY'] = 'code_cave'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
migrate = Migrate(app, db)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    tasks = db.relationship('Task', backref='user', lazy=True)

    def set_password(self, password):
        self.password = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password, password)

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    task = db.Column(db.String(200), nullable=False)
    done = db.Column(db.Boolean, default=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    tag = db.Column(db.String(50))  # Adding a new column for tags
    
    
    # @staticmethod
    # def add_tag(tag_name, user_id):
    #     existing_tag = Task.query.filter_by(tag=tag_name, user_id=user_id).first()
    #     if existing_tag:
    #         return existing_tag
        
    #     new_tag = Task(task='Default Task', tag=tag_name, user_id=user_id)
    #     db.session.add(new_tag)
    #     db.session.commit()
    #     return new_tag


with app.app_context():
    db.create_all()

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()

        if user and user.check_password(password):
            login_user(user)
            return redirect(url_for('layout'))
        else:
            flash('Incorrect username or password. Please try again.', 'error')

    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        if len(password) < 8:
            flash('Password must be at least 8 characters long.', 'error')
            return redirect(url_for('register'))

        try:
            new_user = User(username=username, email=email)
            new_user.set_password(password)
            db.session.add(new_user)
            db.session.commit()
            flash('Registration successful. You can now log in.', 'success')
            return redirect(url_for('login'))
        except IntegrityError:
            db.session.rollback()
            flash('Username or email already taken. Please choose another one.', 'error')

    return render_template('register.html')


@app.route('/layout')
@login_required
def layout():
    predefined_tags = ['Tag1', 'Tag2', 'Tag3'] # Predefined tags for which users can choose
    # # Fetch the list of distinct tags from the database for the current user
    # existing_tags = Task.query.filter_by(user_id=current_user.id).distinct(Task.tag).all()
    #  # Fetch the list of tags from the database
    # predefined_tags = [tag.tag for tag in existing_tags if tag.tag] 
    # new_tag_name = request.args.get('new_tag')
    # if new_tag_name:
    #     Task.add_tag(new_tag_name, current_user.id)
    #     # Update the predefined tags list after adding the new tag
    #     predefined_tags.append(new_tag_name)
    return render_template('layout.html', predefined_tags=predefined_tags)

@app.route('/')
@login_required
def index():
    tasks = Task.query.filter_by(user_id=current_user.id, done=False).limit(5).all()
    remaining_tasks = Task.query.filter_by(user_id=current_user.id, done=False).offset(5).all()
    username = current_user.username

    predefined_tags = ['Tag1', 'Tag2', 'Tag3']  # Predefined tags for which users can choose
    try:
        response = requests.get('http://worldtimeapi.org/api/timezone/Africa/Lagos')
        response.raise_for_status()
        data = response.json()
        api_datetime = data['datetime']
        formatted_datetime = datetime.strptime(api_datetime, '%Y-%m-%dT%H:%M:%S.%f%z')
        formatted_datetime_str = formatted_datetime.strftime('%A %B %d %Y %H:%M')
        datetime_info = formatted_datetime_str
    except Exception:
        datetime_info = "N/A"

    return render_template('index.html', predefined_tags=predefined_tags, tasks=tasks, remaining_tasks=remaining_tasks, username=username, datetime_info=datetime_info)

@app.route('/add', methods=['POST'])
@login_required
def add():
    task_text = request.form['study_items'].strip()
    selected_tag = request.form['tag'] 

    if not task_text:
        flash('Cannot add an empty study item. Please enter a task.', 'error')
        return redirect(url_for('index'))

    new_task = Task(task=task_text, user_id=current_user.id, tag=selected_tag)  # Passing the tag to the Task constructor

    db.session.add(new_task)
    db.session.commit()

    return redirect(url_for('index'))

@app.route('/completed')
@login_required
def completed():
    completed_tasks = Task.query.filter_by(user_id=current_user.id, done=True).all()
    return render_template('completed_routines.html', completed_tasks=completed_tasks)

@app.route('/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit(id):
    task = Task.query.get(id)
    if request.method == 'POST':
        task.task = request.form['study_items']
        db.session.commit()
        return redirect(url_for('index'))
    else:
        return render_template('edit.html', task=task)

@app.route('/check/<int:id>')
@login_required
def check(id):
    task = Task.query.get(id)
    task.done = True
    db.session.commit()
    return redirect(url_for('completed'))

@app.route('/delete/<int:id>', methods=['GET', 'POST'])
@login_required
def delete(id):
    task = Task.query.get_or_404(id)
    if request.method == 'POST':
        if request.form.get('confirm') == 'yes':
            db.session.delete(task)
            db.session.commit()
            return redirect(url_for('index'))
        else:
            return redirect(url_for('index'))
    return render_template('confirm_delete.html', task=task)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True) */
